#!/bin/sh
set -e
#
# Settings (used both in backup and restore)
#
BACKUP_DIR=/data/backup
SYSTEMD_STATE_ENABLED="$BACKUP_DIR/services_state_enabled"

EXIT_OK=0
EXIT_ERROR=1

###################
# backup
###################
backup() {
    mkdir -p "$BACKUP_DIR"
    chown -R root:root "$BACKUP_DIR"

    if command -V systemctl >/dev/null 2>&1; then
        echo "Saving systemd service state" >&2
        systemctl list-unit-files | grep enabled | cut -d\  -f1 > "$SYSTEMD_STATE_ENABLED"
    fi

    # if [ -n  "$(ls -A /var/tedge/)" ]; then
    #     mkdir -p /data/var_tedge && cp -fr /var/tedge/* /data/var_tedge
    # fi

    rm -f "$BACKUP_DIR/etc_tedge.tgz"
    tar -cvpzf "$BACKUP_DIR/etc_tedge.tgz" /etc/tedge/
}

backup_part_to_part() {
    #
    # Copy files directly from partition 1 to 2
    #
    echo "$(mender show-artifact): Running $(basename "$0")" >&2
    FW_PRINTENV=$(which fw_printenv)
    if [ ! -x "$FW_PRINTENV" ]; then
        exit 1
    fi

    current=$("$FW_PRINTENV" mender_boot_part | awk -F = '{ print $2 }')

    if [ "$current" = "2" ]; then
        newroot=/dev/mmcblk0p3
    elif [ "$current" = "3" ]; then
        newroot=/dev/mmcblk0p2
    else
        echo "Unexpected current root: $current" >&2
        exit 1
    fi

    # force unmounting any previously mounted partition (left over from any failed run)
    # use lazy unmounting so it does not hang
    # umount -f /mnt >/dev/null 2>&1 || true
    # sleep 1
    echo "mounting newroot to /mnt: $newroot" >&2
    if ! mount "$newroot" /mnt; then
        echo "Failed to mount $newroot" >&2
        exit 1
    fi

    # wait for mountpoint
    count=0
    while ! mountpoint -q /mnt
    do
        sleep 1
        if [ "$count" -ge 30 ]; then
            echo "timed out waiting for mount to be ready" >&2
            exit 1
        fi
        count=$((count + 1))
    done

    echo "mounted newroot to /mnt: $newroot" >&2

    # tedge files
    if [ -d /etc/tedge ]; then
        echo "Copying /etc/tedge to $newroot" >&2

        if [ ! -d /mnt/etc/tedge ]; then
            mkdir -p /mnt/etc/tedge
            chown tedge:tedge /mnt/etc/tedge
        fi
        cp -Rfa /etc/tedge/* /mnt/etc/tedge

        # data files
        VAR_TEDGE=$(tedge config get data.path)
        NEW_VAR_TEDGE="/mnt$VAR_TEDGE"

        echo "Copying $VAR_TEDGE to $newroot" >&2
        if [ ! -d "$NEW_VAR_TEDGE" ]; then
            mkdir -p "$NEW_VAR_TEDGE"
            chown tedge:tedge "$NEW_VAR_TEDGE"
        fi
        cp -Rfa "$VAR_TEDGE"/* "$NEW_VAR_TEDGE"
    fi

    # ssh authorized keys
    if [ -d /home/root/.ssh ]; then
        if [ -f /home/root/.ssh/authorized_keys ]; then
            if [ -f /mnt/home/root/.ssh/authorized_keys ]; then
                cp /home/root/.ssh/authorized_keys /mnt/home/root/.ssh/authorized_keys
            else
                echo "Found authorized_keys in new root, skipping copy" >&2
            fi
        else
            echo "No authorized keys in current root, skipping copy" >&2
        fi
    fi

    # ssh configuration
    if [ -d /mnt/etc/ssh ]; then
        keys=$(ls -l /mnt/etc/ssh/*key* 2>/dev/null | wc -l)

        if [ "$keys" -eq 0 ]; then
            cp /etc/ssh/*key* /mnt/etc/ssh
        else
            echo "Found ssh keys in new root, skipping copy" >&2
        fi
    else
        echo "Failed to find a /etc/ssh on newroot partition" >&2
        exit 1
    fi

    umount "$newroot"
}

###################
# restore
###################
restore() {
    if [ ! -d "$BACKUP_DIR" ]; then
        echo "backup directory does not exist. This is abnormal, aborting just in case. backup_dir=$BACKUP_DIR" >&2
        exit 1
    fi

    # tar xzpf "$BACKUP_DIR/etc_tedge.tgz" /etc/tedge

    if command -V systemctl >/dev/null 2>&1; then
        while read -r UNIT_NAME; do
            if [ -n "$UNIT_NAME" ]; then
                if systemctl list-unit-files "$UNIT_NAME" >/dev/null 2>&1; then
                    echo "Enabling $UNIT_NAME" >&2
                    systemctl enable "$UNIT_NAME"
                    systemctl start "$UNIT_NAME"
                fi
            fi
        done < "$SYSTEMD_STATE_ENABLED"
    fi
    
    #
    # reconnect mappers (to enforce regeneration of bridge files (to add/remove values as required))
    #
    MAPPERS="c8y az aws"
    for name in $MAPPERS; do
        if [ -n "$(tedge config get "${name}.url" 2>/dev/null)" ]; then
            # Try reconnecting, but ignore any failures as it could be due to connectivity problems, and these are detected downstream
            # using a proper retry mechanism
            tedge reconnect "${name}" >&2 || true
        else
            echo "Skipping mapper as it is not configured. ${name}" >&2
        fi
    done
}

#
# Main
#
SCRIPT_NAME="$(basename "$0")"

case "$SCRIPT_NAME" in
    *ArtifactInstall_Leave*)
        backup
        backup_part_to_part
        ;;

    *ArtifactCommit_Enter*)
        restore
        ;;

    *)
        echo "Unrecognized usage. name=$SCRIPT_NAME" >&2
        exit "$EXIT_ERROR"
        ;;
esac

exit "$EXIT_OK"
