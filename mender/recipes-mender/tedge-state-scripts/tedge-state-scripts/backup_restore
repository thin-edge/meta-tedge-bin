#!/bin/sh
set -e
#
# Settings (used both in backup and restore)
#
BACKUP_DIR=/data/backup
SYSTEMD_STATE_ENABLED="$BACKUP_DIR/services_state_enabled"

EXIT_OK=0
EXIT_ERROR=1

###################
# backup
###################
backup() {
    mkdir -p "$BACKUP_DIR"
    chown -R root:root "$BACKUP_DIR"

    if command -V systemctl >/dev/null 2>&1; then
        echo "Saving systemd service state" >&2
        systemctl list-unit-files | grep enabled | cut -d\  -f1 > "$SYSTEMD_STATE_ENABLED"
    fi

    if [ -n  "$(ls -A /etc/tedge/)" ]; then
        mkdir -p /data/etc_tedge && cp -fr /etc/tedge/* /data/etc_tedge
    fi

    if [ -n  "$(ls -A /var/tedge/)" ]; then
        mkdir -p /data/var_tedge && cp -fr /var/tedge/* /data/var_tedge
    fi

    # rm -f "$BACKUP_DIR/etc_tedge.tgz"
    # tar -cvpzf "$BACKUP_DIR/etc_tedge.tgz" /etc/tedge/
    # tar xpf "$BACKUP_DIR/etc_tedge.tgz" /etc/tedge
}

###################
# restore
###################
restore() {
    if [ ! -d "$BACKUP_DIR" ]; then
        echo "backup directory does not exist. This is abnormal, aborting just in case. backup_dir=$BACKUP_DIR" >&2
        exit 1
    fi

    if command -V systemctl >/dev/null 2>&1; then
        while read -r UNIT_NAME; do
            if [ -n "$UNIT_NAME" ]; then
                if systemctl list-unit-files "$UNIT_NAME"; then
                    echo "Enabling $UNIT_NAME" >&2
                    systemctl enable "$UNIT_NAME"
                    systemctl start "$UNIT_NAME"
                fi
            fi
        done < "$SYSTEMD_STATE_ENABLED"
    fi
    
    #
    # reconnect mappers (to enforce regeneration of bridge files (to add/remove values as required))
    #
    MAPPERS="c8y az aws"
    for name in $MAPPERS; do
        if [ -n "$(tedge config get "${name}.url" 2>/dev/null)" ]; then
            # Try reconnecting, but ignore any failures as it could be due to connectivity problems, and these are detected downstream
            # using a proper retry mechanism
            tedge reconnect "${name}" >&2 || true
        else
            echo "Skipping mapper as it is not configured. ${name}" >&2
        fi
    done
}

#
# Main
#
SCRIPT_NAME="$(basename "$0")"

case "$SCRIPT_NAME" in
    *ArtifactInstall_Leave*)
        backup
        ;;

    *ArtifactCommit_Enter*)
        restore
        ;;

    *)
        echo "Unrecognized usage. name=$SCRIPT_NAME" >&2
        exit "$EXIT_ERROR"
        ;;
esac

exit "$EXIT_OK"
