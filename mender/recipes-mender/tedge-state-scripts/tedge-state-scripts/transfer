#!/bin/sh
set -e
echo "state-script version: 1" >&2
#
# Retain ssh server keys from the current root
#

echo "$(mender show-artifact): Running $(basename "$0")" >&2

FW_PRINTENV=$(which fw_printenv)

if [ ! -x "$FW_PRINTENV" ]; then
    exit 1
fi

current=$("$FW_PRINTENV" mender_boot_part | awk -F = '{ print $2 }')

# Note: The partitions are called from ArtifactInstall the "swap" has already occurred, so the new root partition is the "current" it is just not mounted yet
# If the script was called in Install, then it would be the opposite
if [ "$current" = "2" ]; then
    newroot=/dev/mmcblk0p2
elif [ "$current" = "3" ]; then
    newroot=/dev/mmcblk0p3
else
    echo "Unexpected current root: $current" >&2
    exit 1
fi

echo "mounting newroot to /mnt: $newroot" >&2
if ! mount "$newroot" /mnt; then
    echo "Failed to mount $newroot" >&2
    exit 1
fi

# wait for mountpoint
count=0
while ! mountpoint -q /mnt
do
    sleep 1
    if [ "$count" -ge 30 ]; then
        echo "timed out waiting for mount to be ready" >&2
        exit 1
    fi
    count=$((count + 1))
done

echo "mounted newroot to /mnt: $newroot" >&2

# Save core services as presets
echo "Saving presents" >&2
rm -f /mnt/etc/systemd/system-preset/98-thin-edge.preset
mkdir -p /mnt/etc/systemd/system-preset
systemctl list-unit-files | grep enabled | grep -E "^tedge|^c8y|^mosquitto" | cut -d\  -f1 | while read -r UNIT_NAME; do
    echo "Adding $UNIT_NAME to service preset" >&2
    echo "enable $UNIT_NAME" >> /mnt/etc/systemd/system-preset/98-thin-edge.preset
done

# tedge files
if [ -d /etc/tedge ]; then
    echo "Copying /etc/tedge to $newroot" >&2
    if [ ! -d /mnt/etc/tedge ]; then
        mkdir -p /mnt/etc/tedge
        chown tedge:tedge /mnt/etc/tedge
    fi
    cp -Rfa /etc/tedge/* /mnt/etc/tedge

    # data files
    VAR_TEDGE=$(tedge config get data.path)
    NEW_VAR_TEDGE="/mnt$VAR_TEDGE"

    echo "Copying $VAR_TEDGE to $newroot" >&2
    if [ ! -d "$NEW_VAR_TEDGE" ]; then
        mkdir -p "$NEW_VAR_TEDGE"
        chown tedge:tedge "$NEW_VAR_TEDGE"
    fi
    cp -Rfa "$VAR_TEDGE"/* "$NEW_VAR_TEDGE"
fi

# ssh authorized keys
if [ -d /home/root/.ssh ]; then
    if [ -f /home/root/.ssh/authorized_keys ]; then
        if [ ! -f /mnt/home/root/.ssh/authorized_keys ]; then
            echo "Copying authorized_keys to $newroot" >&2
            mkdir -p /mnt/home/root/.ssh
            chmod 700 /mnt/home/root/.ssh
            cp -Rfa /home/root/.ssh/* /mnt/home/root/.ssh/
        else
            echo "Found authorized_keys in new root, skipping copy" >&2
        fi
    else
        echo "No authorized keys in current root, skipping copy" >&2
    fi
fi

# ssh configuration
SSH_SERVER_DIR=
if [ -d /mnt/etc/ssh ]; then
    SSH_SERVER_DIR=etc/ssh
elif [ -d /mnt/etc/dropbear ]; then
    SSH_SERVER_DIR=etc/dropbear
fi

if [ -n "$SSH_SERVER_DIR" ]; then
    keys=$(ls -l /mnt/"$SSH_SERVER_DIR"/*key* 2>/dev/null | wc -l)

    if [ "$keys" -eq 0 ]; then
        echo "Copying ssh server key (/$SSH_SERVER_DIR) to $newroot" >&2
        cp "/$SSH_SERVER_DIR"/*key* "/mnt/$SSH_SERVER_DIR"
    else
        echo "Found ssh keys in new root, skipping copy" >&2
    fi
else
    echo "Failed to find a ssh server config on newroot partition" >&2
    exit 1
fi

# sync before unmounting
sync
# TODO: Check if unmounting is really required as it could hang here!
# umount -f -l "$newroot"
