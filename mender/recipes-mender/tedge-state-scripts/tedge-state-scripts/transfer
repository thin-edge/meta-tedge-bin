#!/bin/sh
set -e
echo "state-script version: 5" >&2

# Use trap to unmount in case of unexpected errors
# unmount using mountpoint rather than device (in case it is mounted elsewhere)
trap_exit() {
    sync "/tmp/inactive_part" ||:
    umount -l /tmp/inactive_part ||:
}
trap trap_exit EXIT

MENDER_ROOTFS_PART_A="/dev/mmcblk0p2"
MENDER_ROOTFS_PART_B="/dev/mmcblk0p3"

#
# Retain ssh server keys from the current root
#
if mount | grep "${MENDER_ROOTFS_PART_A} on / "; then
  inactive_part="${MENDER_ROOTFS_PART_B}"
else
  inactive_part="${MENDER_ROOTFS_PART_A}"
fi

target="/tmp/inactive_part"
echo "Mounting ${inactive_part} to ${target}"
mkdir -p "${target}"

# DEBUG: Wait before mounting (to give time for the partition write to finish?)
sleep 5
# mount -o ro ${inactive_part} /tmp/inactive_part
mount ${inactive_part} "${target}"
echo "mounted ${inactive_part} to ${target}" >&2

# Save core services as presets
echo "Saving presets" >&2

# Note: ||: is needed as this can fail if the file does not exist (even when using rm -f!)
# This might be a combination of a busybox thing and/or the way the volume is mounted
rm -f "${target}/etc/systemd/system-preset/98-thin-edge.preset" ||:
mkdir -p "${target}/etc/systemd/system-preset"
systemctl list-unit-files | grep enabled | grep -E "^tedge|^c8y|^mosquitto" | cut -d\  -f1 | while read -r UNIT_NAME; do
    echo "Adding $UNIT_NAME to service preset" >&2
    echo "enable $UNIT_NAME" >> "${target}/etc/systemd/system-preset/98-thin-edge.preset"
done


# WORKAROUND: Copy systemd symlinks so that the agent is enable by default
# Check if this causes a problem if the service does not exist in the new image
if [ -e /etc/systemd/system/multi-user.target.wants/tedge-agent.service ]; then
    echo "Copying thin-edge.io services symlink to enable services on startup"

    if ls /etc/systemd/system/multi-user.target.wants/tedge* >/dev/null 2>&1; then
        cp -af /etc/systemd/system/multi-user.target.wants/tedge* "${target}/etc/systemd/system/multi-user.target.wants/"
    fi

    if ls /etc/systemd/system/multi-user.target.wants/c8y* >/dev/null 2>&1; then
        cp -af /etc/systemd/system/multi-user.target.wants/c8y* "${target}/etc/systemd/system/multi-user.target.wants/"
    fi
fi

# sudoers
if [ -d /etc/sudoers.d ]; then
    cp -af /etc/sudoers.d/* "${target}/etc/sudoers.d/"
fi

# mosquitto
if [ -d /var/lib/mosquitto ]; then
    echo "transferring mosquitto db" >&2
    mkdir -p "${target}/var/lib/mosquitto"
    chown -R mosquitto:mosquitto "${target}/var/lib/mosquitto"
    if ls /var/lib/mosquitto/* >/dev/null 2>&1; then
        cp -Rfa /var/lib/mosquitto/* "${target}/var/lib/mosquitto"
    fi
fi

# tedge files
if [ -d /etc/tedge ]; then
    echo "Copying /etc/tedge" >&2
    if [ ! -d "${target}/etc/tedge" ]; then
        mkdir -p "${target}/etc/tedge"
        chown tedge:tedge "${target}/etc/tedge"
    fi
    # TODO: Does a symlink to the /data/tedge/.agent cause a problem here?
    cp -RfaH /etc/tedge/* "${target}/etc/tedge"

    # data files
    VAR_TEDGE=$(tedge config get data.path)
    NEW_VAR_TEDGE="${target}${VAR_TEDGE}"

    echo "Copying $VAR_TEDGE" >&2
    if [ ! -d "$NEW_VAR_TEDGE" ]; then
        mkdir -p "$NEW_VAR_TEDGE"
        chown tedge:tedge "$NEW_VAR_TEDGE"
    fi
    cp -Rfa "$VAR_TEDGE"/* "$NEW_VAR_TEDGE"
fi

# ssh authorized keys
if [ -d /home/root/.ssh ]; then
    if [ -f /home/root/.ssh/authorized_keys ]; then
        if [ ! -f "${target}/home/root/.ssh/authorized_keys" ]; then
            echo "Copying authorized_keys" >&2
            mkdir -p "${target}/home/root/.ssh"
            chmod 700 "${target}/home/root/.ssh"
            cp -Rfa /home/root/.ssh/* "${target}/home/root/.ssh/"
        else
            echo "Found authorized_keys in new root, skipping copy" >&2
        fi
    else
        echo "No authorized keys in current root, skipping copy" >&2
    fi
fi

# ssh configuration
SSH_SERVER_DIR=
if [ -d "${target}/etc/ssh" ]; then
    SSH_SERVER_DIR=etc/ssh
elif [ -d "${target}/etc/dropbear" ]; then
    SSH_SERVER_DIR=etc/dropbear
fi

if [ -n "$SSH_SERVER_DIR" ]; then
    keys=$(ls -l "${target}/${SSH_SERVER_DIR}"/*key* 2>/dev/null | wc -l)

    if [ "$keys" -eq 0 ]; then
        echo "Copying ssh server key (/$SSH_SERVER_DIR)" >&2
        cp "/${SSH_SERVER_DIR}"/*key* "${target}/${SSH_SERVER_DIR}"
    else
        echo "Found ssh keys in new root, skipping copy" >&2
    fi
else
    echo "Failed to find a ssh server config on newroot partition" >&2
    exit 1
fi

exit 0
