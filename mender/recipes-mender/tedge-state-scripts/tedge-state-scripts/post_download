#!/bin/sh
set -e
#
# Retain ssh server keys from the current root
#

echo "$(mender show-artifact): Running $(basename "$0")" >&2

FW_PRINTENV=$(which fw_printenv)

if [ ! -x "$FW_PRINTENV" ]; then
    exit 1
fi

current=$("$FW_PRINTENV" mender_boot_part | awk -F = '{ print $2 }')

if [ "$current" = "2" ]; then
    newroot=/dev/mmcblk0p3
elif [ "$current" = "3" ]; then
    newroot=/dev/mmcblk0p2
else
    echo "Unexpected current root: $current" >&2
    exit 1
fi

# force unmounting any previously mounted partition (left over from any failed run)
umount /mnt >/dev/null 2>&1 || true
if ! mount "$newroot" /mnt; then
    echo "Failed to mount $newroot" >&2
    exit 1
fi

# wait for mountpoint
count=0
while ! mountpoint -q /mnt
do
    sleep 1
    if [ "$count" -ge 30 ]; then
        echo "timed out waiting for mount to be ready" >&2
        exit 1
    fi
    count=$((count + 1))
done

# tedge files
if [ -d /etc/tedge ]; then

    if [ ! -d /mnt/etc/tedge ]; then
        mkdir -p /mnt/etc/tedge
        chown tedge:tedge /mnt/etc/tedge
    fi
    cp -Rfa /etc/tedge/* /mnt/etc/tedge

    # data files
    VAR_TEDGE=$(tedge config get data.path)
    NEW_VAR_TEDGE="/mnt$VAR_TEDGE"

    if [ ! -d "$NEW_VAR_TEDGE" ]; then
        mkdir -p "$NEW_VAR_TEDGE"
        chown tedge:tedge "$NEW_VAR_TEDGE"
    fi
    cp -Rfa "$VAR_TEDGE"/* "$NEW_VAR_TEDGE"
fi

# ssh authorized keys
if [ -d /home/root/.ssh ]; then
    if [ -f /home/root/.ssh/authorized_keys ]; then
        if [ -f /mnt/home/root/.ssh/authorized_keys ]; then
            cp /home/root/.ssh/authorized_keys /mnt/home/root/.ssh/authorized_keys
        else
            echo "Found authorized_keys in new root, skipping copy" >&2
        fi
    else
        echo "No authorized keys in current root, skipping copy" >&2
    fi
fi

# ssh configuration
if [ -d /mnt/etc/ssh ]; then
    keys=$(ls -l /mnt/etc/ssh/*key* 2>/dev/null | wc -l)

    if [ "$keys" -eq 0 ]; then
        cp /etc/ssh/*key* /mnt/etc/ssh
    else
        echo "Found ssh keys in new root, skipping copy" >&2
    fi
else
    echo "Failed to find a /etc/ssh on newroot partition" >&2
    exit 1
fi

umount "$newroot"
